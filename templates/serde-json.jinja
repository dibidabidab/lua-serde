{% macro generate(structName, struct, flags) %}
    {{ toJson(structName, struct) }}
    {{ toJsonArray(structName, struct) }}
    {{ fromJson(structName, struct, flags) }}
    {{ fromJsonArray(structName, struct, flags) }}
    {{ copyFieldsFrom(structName, struct, flags) }}
{% endmacro %}

{% macro toJson(structName, struct) %}
    void {{ structName }}::toJson(json &j) const {
        j = json{
            {% for field in struct %}
                { "{{ field.name }}", {{ field.name }} },
            {% endfor %}
        };
    }
{% endmacro %}

{% macro toJsonArray(structName, struct) %}
    void {{ structName }}::toJsonArray(json &j) const {
        j = json::array({
            {% for field in struct %}
                {{ field.name }},
            {% endfor %}
        });
    }
{% endmacro %}

{% macro fromJson(structName, struct, flags) %}
    void {{ structName }}::fromJson(const json &j) {
        {% for field in struct %}
            if (j.contains("{{ field.name }}"))
                {{ field.name }} = j.at("{{ field.name }}") {% if field.typ != "json" %} .get<{{ field.typ }}>() {% endif %};
        {% endfor %}
        {% if flags.dirtyable %}
            bedirtAll();
        {% endif %}
    }
{% endmacro %}

{% macro fromJsonArray(structName, struct, flags) %}
    void {{ structName }}::fromJsonArray(const json &j) {
        const size_t _jsonArraySize = j.size();
        {% for field in struct %}
        if ({{ loop.index0 }} < _jsonArraySize)
        {
            {{ field.name }} = j.at({{ loop.index0 }}) {% if field.typ != "json" %} .get<{{ field.typ }}>() {% endif %};
        }
        {% endfor %}
        {% if flags.dirtyable %}
            bedirtAll();
        {% endif %}
    }
{% endmacro %}

{% macro copyFieldsFrom(structName, struct, flags) %}
    void {{ structName }}::copyFieldsFrom(const {{ structName }} &other) {
        {% for field in struct %}
            {{ field.name }} = other.{{ field.name }};
        {% endfor %}
        {% if flags.dirtyable %}
            bedirtAll();
        {% endif %}
    }
{% endmacro %}

{% macro implicitConversionFunctions(structName, withKeys) %}

    static void to_json(json &j, const {{ structName }} &v)
    {
        {% if withKeys %}
        v.toJson(j);
        {% else %}
        v.toJsonArray(j);
        {% endif %}
    }
    static void from_json(const json &j, {{ structName }} &v)
    {
        {% if withKeys %}
        v.fromJson(j);
        {% else %}
        v.fromJsonArray(j);
        {% endif %}
    }

{% endmacro %}