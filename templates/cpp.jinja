{% import 'header-footer.jinja' as hd %}
{% import 'properties.jinja' as prop %}
{% import 'serde-json.jinja' as jserde %}
{% import 'serde-lua.jinja' as lserde %}
{% import 'stubs.jinja' as stubs %}
{% import 'dirtying.jinja' as dirtying %}

{{ hd.include(config.cpp_incl) }}
#include "{{ filename }}.hpp"

{{ hd.namespace(config.namespace) }}

{% for structName, struct in structs.items() %}
    /**
     * STRUCT {{ structName }}
     */

    {{ structName }}::{{ structName }}()

    {% if struct.expose[0] or struct.cpp_only[0] %} {# struct has at least 1 field to initialize #}
        :
        {{ prop.init(struct.expose) }}

        {% if struct.expose[0] and struct.cpp_only[0] %}    ,   {% endif %}

        {{ prop.init(struct.cpp_only) }}

    {% endif %}
    {
        {% if struct.flags.dirtyable %}
        _allDirtyFlags = 0;
        {% endif %}
    }

    {{ structName }}::{{ structName }}(const sol::table &table)
    : {{ structName }}() // call other constructor first, to initialize default values
    {
        fromLuaTable(table);
    }

    {{ dirtying.dirtyMethodsImpl(structName, struct) }}

    {% if struct.flags.not_a_component == False %}
        {{ lserde.registerEntityEngineFunctions(structName, struct) }}
    {% endif %}


    // Lua serde functions
    {{ lserde.fromLuaTable(structName, struct.split) }}
    {{ lserde.generateLuaUserType(structName, struct, config.namespace) }}

    // JSON serde functions
    {{ jserde.generate(structName, struct.expose, struct.flags) }}

{% endfor %}

{{ hd.namespace_end(config.namespace) }}
